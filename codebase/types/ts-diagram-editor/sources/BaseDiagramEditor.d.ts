import { VNode } from "../../ts-common/dom";
import { IEventSystem } from "../../ts-common/events";
import { IKeyManager } from "../../ts-common/KeyManager";
import { View } from "../../ts-common/view";
import { DataEvents, Diagram, DiagramEvents, SelectionEvents, IShapeToolbarConfig, ActionDirection } from "../../ts-diagram";
import { Layout } from "../../ts-layout";
import { IDataItem } from "../../ts-data";
import { Controls } from "./controls/Controls";
import { Sidebar } from "./Sidebar";
import { HistoryManager } from "./HistoryManager";
import { SelectionBox } from "./SelectionBox";
import { BlockSelection } from "./BlockSelection";
import { DiagramEditorEvents, IDefaultEditorConfig, IDiagramEditor, IDiagramEditorHandlersMap, IEditorConfig, IMindmapEditorConfig, IOrgEditorConfig, ViewMode } from "./types";
import { Id } from "../../ts-common/types";
export declare abstract class BaseDiagramEditor extends View implements IDiagramEditor {
    version: string;
    config: IEditorConfig;
    events: IEventSystem<DataEvents | SelectionEvents | DiagramEvents | DiagramEditorEvents, IDiagramEditorHandlersMap>;
    diagram: Diagram;
    history: HistoryManager;
    protected _layout: Layout;
    protected _sidebar: Sidebar;
    protected _resizer: Controls;
    protected _selectionBox: SelectionBox;
    protected _blockSelection: BlockSelection;
    protected _keyManager: IKeyManager;
    private _touch;
    constructor(container: string | HTMLElement, config: IEditorConfig);
    paint(): void;
    import(diagram: Diagram): void;
    parse(data: IDataItem[]): void;
    serialize(): IDataItem[];
    getRootView(): VNode;
    zoomIn(step?: number): void;
    zoomOut(step?: number): void;
    setViewMode(mode: ViewMode): void;
    protected abstract _initUI(container: any): any;
    protected abstract _initDiagram(): any;
    protected _setHandlers(): void;
    protected _checkEditMode(): void;
    protected _removeItem(id: Id): void;
    protected _initHotkeys(): void;
    protected _getDefaults(): any;
    protected _importFile(data: any): void;
    protected _getToolbarConfig({ type, shapeToolbar, }: IOrgEditorConfig | IMindmapEditorConfig | IDefaultEditorConfig): IShapeToolbarConfig[];
    protected _moveItem(item: IDataItem, step: number, dir: ActionDirection): void;
    protected _removeLineTitle(item: IDataItem): void;
    private _removeSelected;
    private _itemsHandlerClick;
    private _dragStart;
    private _clearTouchTimer;
}
